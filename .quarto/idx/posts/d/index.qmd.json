{"title":"Bussiness analytic using R","markdown":{"yaml":{"title":"Bussiness analytic using R","date":"2023-12-09","author":"Bhagyasri Katuri","categories":["code","analysis","visualization","plotly","data anlysis","R"],"image":"b.jpg"},"headingText":"Business Problem","containsRefs":false,"markdown":"\n\n\nIn this group project, you will work with analysts' forecast data of earning per share (EPS) provided by Wharton Research Data Services (WRDS). Institutional Brokers' Estimate System (I/B/E/S) provides historical data on certain financial indicators collected from thousands of individual analysts working in more than 3,000 broker houses.\n\n-   **TICKER:** A unique identifier assigned to each security. In this group project, you will only model \"NFLX\" ticker.\n\n-   **CNAME:** Company name\n\n-   **ACTDATS:** The Activation date: It is the date when the analyst forecast became effective within the IBES database.\n\n-   **ESTIMATOR:** Sellside institution (mostly broker house). It is just the broker.\n\n-   **ANALYS:** The person who makes the forecast and work for sellside institution. Estimators and analysts are represented by codes to hide their real names.\n\n-   **FPI:** Forecast Period Indicator: The forecasting period. 6: Next Fiscal Quarter 1: Next Fiscal Year\n\n-   **MEASURE**: The variable being estimated. We have data for earning per share (EPS)\n\n-   **VALUE:** The forecasted value of EPS\n\n-   **FPEDATS**: The Forecast Period End Date: It is the ending date of the fiscal period to which the estimate applies. For the majority of companies, the FPEDATS date is December 31st of that year.\n\n-   **REVDATS:** The Review Date: It is the most recent date on which IBES called the analyst and verified that particular estimate as still valid for that analyst. If an analyst confirms that a previous estimate is still valid, the original database record for that estimate is retained and only the REVDATS variable is updated. If an analyst changes their estimate for a given company, a new record is entered in the database with a new ANNDATS. The old record of the analyst (containing the previous estimate) is retained in the database.\n\n-   **REVTIMS**: Time-stamp of REVDATS\n\n-   **ANNDATS**: The Announce date: It is the date on which the analyst first made that particular estimate.\n\n-   **ANNTIMS**: Time-stamp of ANNDATS\n\n-   **ACTUAL**: The realized EPS, the true EPS value.\n\n-   **ANNDATS_ACT**: The Announced date of Actual EPS: The actual EPS value is announced by the company at this date.\n\n-   **ANNTIMS_ACT**: The time-stamp of ANNDATS_ACT\n\n```{r, echo=TRUE, warning=FALSE}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(corrplot)\nlibrary(lubridate)\nlibrary(kableExtra) \n# Read CSV file\nNFLX <- read.csv(\"C:/Users/HP/Downloads/NFLX.csv\", header=TRUE)\nnames(NFLX)\n```\n\n## How to read the data\n\n**The first row in NFLX data set**: On 09‐Aug-2002 (ANNDATS), analyst 6749 (ANALYS) at Estimator 1872 (ESTIMATOR) predicts that the EPS (MEASURE) for NETFLIX INC. (CNAME) with a ticker of NFLX (TICKER) with forecast period ending 30‐Sep-2002 (FPEDATS) is -\\$0.0086 (VALUE). This estimates was entered into the database on 12‐Aug-2002 (ACTDATS). On 17-Oct-2002 (ANNDATS_ACT), NETFLIX INC. announced an actual EPS of \\$7e-04 (\\$0.0007) (ACTUAL) for this quarter (FPI=6).\n\n```{r, echo=TRUE}\nhead(NFLX,n=1)\n```\n\n## Your Turn:\n\n::: {.callout-important appearance=\"simple\"}\n## Task 1A: Calculate Missingness\n\nCheck to see the missing values in NFLX dataset and calculate the percent missing for each variable in `NFLX` and list your findings in R object called `NFLX_missingness`. `NFLX_missingness` is a dataframe with two columns: The first column, `Variable`, stores the variable names and the second column, `Missingness` shows the percent missing in percentage points with two decimal points.\n:::\n\n## Your code for Task 1A\n\n```{r, echo=TRUE}\nlibrary(tidyr)\nNFLX <- read.csv(\"C:/Users/HP/Downloads/NFLX.csv\", header=TRUE)\nnames(NFLX)\n# Calculate the percent missing for each variable in NFLX\nNFLX_missingness <- NFLX %>%\n    summarise_all(~mean(is.na(.)) * 100)\n\n# Print the NFLX_missingness data frame\nprint(NFLX_missingness)\n```\n\n::: {.callout-important appearance=\"simple\"}\n## Task 1B: Data Manipulation\n\nConduct the following data manipulations on `NFLX`:\n\n-   Drop rows from the data set when a variable has a missing value\n\n-   Drop rows from the data set the quarterly forecasts (drop FPI=6)\n\n-   Declare TICKER, CNAME, ESTIMATOR , ANALYS, FPI , and MEASURE variables as factor\n\n-   Declare ACTDATS, FPEDATS , ANNDATS, REVDATS, ANNDATS_ACT as time variable.\n\n-   Drop ANNTIMS_ACT, ANNTIMS , and REVTIMS\n\n-   Create a new column named YEAR that captures the year in FPEDATS\n\n-   Name your reduced dataset as `NFLX1`\n\n-   Print out data structure and the summary of NFLX1\n:::\n\n## Your code for Task 1B\n\n```{r, echo=TRUE}\n# Copy NFLX to NFLX1 without assigning data types\nNFLX1 <- NFLX\n\n# Drop rows from the data set when a variable has a missing value\nNFLX1 <- NFLX1 %>% na.omit()\n\n# Drop rows from the data set where FPI=6\nNFLX1 <- NFLX1 %>% filter(FPI != 6)\n\n# Drop ANNTIMS_ACT, ANNTIMS, and REVTIMS\nNFLX1 <- NFLX1 %>% select(-ANNTIMS_ACT, -ANNTIMS, -REVTIMS)\n\n# Create a new column named YEAR that is an exact copy of the data in FPEDATS\nNFLX1 <- NFLX1 %>% mutate(YEAR = FPEDATS)\n\n# Print out data structure and the summary of NFLX1\nstr(NFLX1)\nsummary(NFLX1)\n```\n\n::: {.callout-important appearance=\"simple\"}\n## Task 2: Calculate Number of Analysts and Brokerage Houses\n\n-   Calculate the total number of **unique** analysts in **NFLX1** dataset that provide forecasts **each year** and name your R object as **NumberAnalyst**\n\n-   Calculate the total number of **unique** brokerage houses (ESTIMATOR) in **NFLX1** dataset that provide forecasts **each year** and name your R object as **NumberBrokerage**\n\n-   **Need Written Response in this callout:** In which year(s) we have the highest number of unique analysts providing forecasts for NFLX ticker? In which year(s), we have the highest number of unique brokerage houses providing forecasts for the NFLX ticker.\n\n***`2011 is the year number of distinct analysts providing forecasts for netflix.`***\n:::\n\n## Your code for Task 2\n\n```{r, echo=TRUE}\n# Calculate the total number of unique analysts providing forecasts each year\nNumberAnalyst <- NFLX1 %>%\n  group_by(YEAR) %>%\n  distinct(ESTIMATOR) %>%\n  summarise(NumAnalysts = n_distinct(ESTIMATOR))\n\n# Print the NumberAnalyst object\nprint(NumberAnalyst)\n\n# Calculate the total number of unique brokerage houses providing forecasts each year\nNumberBrokerage <- NFLX1 %>%\n  group_by(YEAR) %>%\n  distinct(ESTIMATOR) %>%\n  summarise(NumBrokerage = n_distinct(ESTIMATOR))\n\n# Print the NumberBrokerage object\nprint(NumberBrokerage)\n\n```\n\n::: {.callout-important appearance=\"simple\"}\n## Task 3: Get the most recent forecast in each year\n\n-   It is quite possible that an analyst makes multiple forecasts throughout the year for the same fiscal period. Remove observations from **NFLX1** if an analyst has multiple predictions for the same year and keep the last one (the most recent forecast for each year). Name your new dataset as **NFLX2.** This step is crucial for successful execution of the following tasks. Print the dimension of `NFLX2`.\n\n-   Check your work: If your `NFLX2` dataset has 641 rows and 14 columns, then you are on the right track. If not, please seek help!\n:::\n\n## Your code for Task 3\n\n```{r, echo=TRUE}\n# Task 3: Get the most recent forecast in each year\n\n# Get the most recent forecast for each analyst in each year\nNFLX2 <- NFLX1 %>%\n    # Group by analyst and year\n    group_by(ANALYS, YEAR) %>%\n    # Filter to keep the most recent forecast for each analyst in each year\n    filter(\n        REVDATS == max(REVDATS)\n    ) %>%\n    # Ungroup the data frame\n    ungroup()\n\n# Print the dimension of NFLX2\ndim(NFLX2)\n\n# Check your work: If your NFLX2 dataset has 641 rows and 14 columns, then you are on the right track. If not, please seek help!\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 4: Calculate past accuracy\n\n-   Create a copy of `NFLX2` and call it `NFLX3`\n\n-   For every year within the dataset `NFLX3`, compute the forecasting performance of each analyst for the current year and store the results in a new column labeled `accuracy`. In the calculation of forecast performance, you can use the VALUE-ACTUAL as the forecast accuracy measure.\n\n-   For each year in the `NFLX3` dataset, compute the forecasting performance of each analyst from the **previous year** and store the results in a new column called `past_accuracy`\n\n-   As an example, consider the year 2006, where analyst 1047, employed at brokerage house 464, provided an estimated end-of-period EPS of 0.0929 (VALUE). However, the actual EPS for that year turned out to be 0.1014 (ACTUAL), resulting in a forecasting error of -0.0085. Consequently, in the subsequent year, 2007, the past_accuracy metric for analyst 1047 would reflect this error by taking the value of -0.0085 (VALUE-ACTUAL).\n\n-   This action will create some missing values and this is perfectly fine.\n\n-   If your code produces 144 NAs, then you are on the right track.\n\n-   Note that we are creating copies of the original dataset at each step to facilitate error detection in case any mistakes occur during the process.\n:::\n\n## Your code for Task 4\n\n```{r, echo=TRUE}\n\n# Create a copy of NFLX2 and call it NFLX3\nNFLX3 <- NFLX2\n\n# Task 4: Calculate past accuracy\n\n# For every year within the dataset NFLX3, compute the forecasting performance of each analyst for the current year and store the results in a new column labeled accuracy.\nNFLX3 <- NFLX3 %>%\n  group_by(YEAR, ANALYS) %>%\n  mutate(accuracy = VALUE - ACTUAL)\n\n# For each year in the NFLX3 dataset, compute the forecasting performance of each analyst from the previous year and store the results in a new column called past_accuracy\nNFLX3 <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  arrange(YEAR) %>%\n  mutate(past_accuracy = lag(accuracy))\n\n# Check if the code produces 144 NAs\nsum(is.na(NFLX3$past_accuracy))\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 5: Forecast Horizon\n\n-   The longer the forecast horizon, the higher the uncertainty associated with EPS forecasts. To control for this fact, create a new column in **NFLX3** called **horizon** that captures the forecast horizon (ANNDATS_ACT- ANNDATS) for **each analyst**.\n\n-   We anticipate observing a negative correlation between `accuracy` and `horizon`. Typically, as the forecast horizon increases, the accuracy tends to decrease, and vice versa. However, in our dataset, there is an exception where we find a positive correlation between `accuracy` and `horizon` for one specific year. Write an R code to identify and determine which year exhibits this positive correlation.\n\n-   **Need Written Response in this callout:** Enter the year in here.\n\n    ***2011 2012 2103 2015 and 2018 with 2018 having a forecast value of 0.24.***\n:::\n\n## Your code for Task 5\n\n```{r, echo=TRUE}\n# Task 5: Forecast Horizon\n# Calculate past accuracy and forecast horizon\nNFLX3 <- NFLX3 %>% group_by(ANALYS) %>% arrange(YEAR) %>% mutate(past_accuracy = lag(accuracy, default = NA))\nNFLX3 <- NFLX3 %>% mutate(horizon = as.numeric(difftime(ANNDATS_ACT, ANNDATS, units = \"days\")))\n\n# Calculate correlation and find positive correlation year\ncorrelation_by_year <- NFLX3 %>% group_by(YEAR) %>% summarise(correlation = cor(accuracy, horizon, use = \"complete.obs\"))\npositive_corr_year <- correlation_by_year %>% filter(correlation > 0)\n\n# Print positive correlation year with correlation values\npositive_corr_year %>% mutate(correlation = round(correlation, 2)) %>% kable() %>% kable_styling(bootstrap_options = \"striped\")\n\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Table 6: Experience\n\n-   We assume that if an analyst is monitoring a company for a long period of time, he/she is expected to make more informed predictions. Create a new column in NFLX3 called **experience** that counts the cumulative number of years the analyst monitor (have predictions) the company. Print the summary of experience column.\n\n-   **Hint:** Try to use cumsum() function in R.\n\n-   **Need Written Response in this callout:** Which analyst (s) has the highest number of **experience** in **NFLX3** dataset and for how long do they monitor the NFLX ticker?\n\n***`Analyst 72088 and 77748 have 17 years of hardcore experience`***\n:::\n\n## Your code for Task 6\n\n```{r, echo=TRUE}\n # Task 6: Experience\n\n# Calculate the cumulative experience for each analyst\nNFLX3 <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  mutate(experience = cumsum(!duplicated(YEAR)))\n\n# Find the analyst(s) with the highest experience\nmax_experience <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  summarise(experience = max(experience)) %>%\n  filter(experience == max(experience))\n\n# Print the summary of the experience column\nprint(summary(NFLX3$experience))\n\n# Find the analyst(s) with the highest experience\nmax_experience <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  summarise(experience = max(experience)) %>%\n  filter(experience == max(experience))\n\n# Print the summary of the experience column\nprint(summary(NFLX3$experience))\n\n# Print the analyst(s) with the highest experience\nprint(max_experience)\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 7: Size\n\n-   If a brokerage house has multiple analysts providing predictions for the same company, it may indicate a greater allocation of resources for company analysis. To capture this, create a new column in the `NFLX3` dataset called `size` that calculates the total count of **unique** analysts employed **per year** by **each** brokerage house (ESTIMATOR)\n\n-   **Need Written Response in this callout:** Print the frequencies for **size** variable. What does this frequency table reveal about the distribution of the number of analysts hired by brokerage houses in this dataset?\n\n***`From the table we can conclude that as the number of analysts increase the frequency of hiring reduces exponentially. This indicates that a brokerage preferred hiring one analyst per every season.`***\n:::\n\n## Your code for Task 7\n\n```{r, echo=TRUE}\n # Task 7: Size\n\n# Calculate the total count of unique analysts employed per year by each brokerage house\nNFLX3 <- NFLX3 %>%\n  group_by(YEAR, ESTIMATOR) %>%\n  mutate(size = n_distinct(ANALYS))\n\n# Print the frequencies for the size variable\nsize_freq <- table(NFLX3$size)\nprint(size_freq)\n\n# Create a frequency table for better visualization\nsize_table <- as.data.frame(size_freq)\ncolnames(size_table) <- c(\"Number of Analysts\", \"Frequency\")\n\n# Sort the table by frequency in descending order\nsize_table <- size_table[order(-size_table$Frequency), ]\n\n# Print the sorted frequency table\nprint(size_table)\n\n# Summary statistics for size variable\nsummary(NFLX3$size)\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 8: Prediction 1\n\n-   In the year 2020, NETFLIX reported an actual earnings per share (EPS) of \\$6.08. To predict this EPS value based on historical data, we will employ a linear regression model using the dataset `NFLX3` up until the year 2019. In this model, the target variable will be `ACTUAL` and the predictor variables will include `VALUE` and `past_accuracy`. C.all your model as `model1.`\n\n-   **Need Written Response in this callout:** Using the linear regression model 'model1,' which has been trained on historical data up to the year 2019, what is the forecasted EPS (Earnings Per Share) for the year 2020? Please provide a brief explanation of the method you employed to make this prediction. If you encountered any challenges or were unable to make the calculation, briefly describe the specific issues you encountered.\n\n***`Using the linear regression model 'model1,' trained on historical data up to the year 2019, we can forecast the EPS (Earnings Per Share) for the year 2020. The method employed involves calculating the R-squared value of the model, which measures the goodness of fit. If the R-squared value is high (greater than 0.5 in this case), we proceed with forecasting.`***\n\n***`In this example, the code calculates the mean of the 'past_accuracy' variable. If the R-squared value is satisfactory, we generate a forecast for the future period. We create a new data frame for the future period with values for the independent variables (VALUE and past_accuracy). The code then uses the 'predict' function to estimate the EPS for the future period.`***\n\n***`If the R-squared value is low, a warning message is provided, indicating that the model may not accurately predict future EPS.`***\n\n***`The method allows us to make forecasts if the model's fit is deemed appropriate. However, we encountered issues with data configuration or model training, those specific challenges should be addressed to ensure the accuracy of the model`***\n:::\n\n## Your code for Task 8\n\n```{r, echo=TRUE}\n# Calculate the mean of past_accuracy\nmean_past_accuracy <- mean(NFLX3$past_accuracy, na.rm = TRUE)\n\n# Convert the 'YEAR' column to the desired format\nNFLX3$YEAR <- as.POSIXct(NFLX3$YEAR, format = \"%Y-%m-%d %H:%M:%S\")\n\n# Create the linear regression model using historical data up to the year 2019\nmodel1 <- lm(ACTUAL ~ VALUE + past_accuracy, data = NFLX3)\n\n# Get the R-squared value of the model\nr_squared <- summary(model1)$r.squared\n\n# If the R-squared value is high, then we can use the model to generate a forecast\nif (r_squared > 0.5) {\n  # Create a new data frame for the future period with the values of the independent variables\n  new_data_future <- data.frame(\n    VALUE = 6.08, # Replace this with the actual value of VALUE for the future period\n    past_accuracy = mean_past_accuracy\n  )\n\n  # Predict the EPS for the future period\n  predicted_eps_future <- predict(model1, newdata = new_data_future)\n\n  # Print the forecasted EPS for the future period\n  cat(\"Forecasted EPS for future period: $\", round(predicted_eps_future, 2))\n} else {\n  # Print a warning message\n  cat(\"The R-squared value is low, so the model may not be able to accurately predict future values of the dependent variable.\")\n}\n\n# Print the mean of past_accuracy\ncat(\"Mean past_accuracy: \", round(mean_past_accuracy, 2))\n\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 9: Prediction 2\n\n-   As an alternative approach, instead of modeling the 'ACTUAL' value, we can obtain the mean and median forecasts for the year 2020 as our best estimates of the EPS value for that year.\n\n-   **Need Written Response in this callout:** Please calculate these forecasts and then compare them with the results from the previous task. Finally, provide your insights and comments based on your findings.\n\n***`In this alternative approach, we opted to calculate the mean and median forecasts for the year 2020 as our best estimates of the EPS value. The mean forecast for 2020 is approximately $1.24, while the median forecast is significantly lower, at approximately $0.41. When comparing these results with the linear regression model from the previous task, it's evident that the model-based forecast might provide a more detailed and potentially accurate prediction. However, these two approaches have their unique merits and drawbacks. The model-driven forecast takes into account historical relationships and variables like 'past_accuracy,' but it heavily relies on the quality of the model fit, as indicated by the R-squared value. On the other hand, the mean and median forecasts provide simple summary statistics but might lack the predictive power of a well-fitted model. The choice between these methods should be influenced by the data quality and the context of the analysis.`***\n:::\n\n## Your code for Task 9\n\n```{r, echo=TRUE}\n# Calculate the mean forecast\nmean_forecast <- mean(NFLX3$VALUE, na.rm = TRUE)\n\n# Calculate the median forecast\nmedian_forecast <- median(NFLX3$VALUE, na.rm = TRUE)\n\n# Print the mean and median forecasts\ncat(\"Mean forecast for 2020: $\", round(mean_forecast, 2))\ncat(\"Median forecast for 2020: $\", round(median_forecast, 2))\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 10: Averages\n\n-   Generate a new dataset named `NFLX4` by aggregating data from `NFLX3` Include the variables `size`, `experience`, `horizon`, `accuracy,` `past_accuracy`, and `ACTUAL` in `NFLX4`. When calculating the yearly averages for these variables, ignore any missing values (NAs). Present a summary of the `NFLX4` dataset.\n\n-   **Need Written Response in this callout:** Subsequently, employ correlation analysis or exploratory data analysis to get insights into the relationships between these variables and 'ACTUAL,' if such relationships exist.\n\n***`After conducting correlation analysis and exploratory data analysis on the dataset NFLX4, several interesting insights into the relationships between variables and 'ACTUAL' have emerged`***\n\n***`The correlation matrix reveals that 'ACTUAL' is positively correlated with 'size' (0.18) and 'experience' (0.69), indicating that, on average, larger groups of analysts and analysts with more experience tend to provide more accurate forecasts for the 'ACTUAL' earnings per share.`***\n\n***`Conversely, 'ACTUAL' is negatively correlated with 'horizon' (-0.63) and 'past_accuracy' (-0.80). This suggests that analysts with a longer forecasting horizon and those who have made more accurate predictions in the past tend to have less accurate forecasts for 'ACTUAL' earnings per share.`***\n\n***`In the exploratory data analysis, scatter plots further highlight these relationships. For instance, the scatter plot of 'ACTUAL' against 'size' shows a general trend of improved accuracy as the number of analysts increases.`***\n\n***`These findings provide valuable insights for understanding the factors that influence the accuracy of earnings per share forecasts ('ACTUAL'). Larger analyst groups and more experienced analysts tend to provide more accurate forecasts, while longer forecasting horizons and a history of past accuracy can lead to less accurate predictions. These relationships can be crucial for analysts, investors, and decision-makers in the financial domain.`***\n:::\n\n```{r, echo=TRUE}\n# Aggregate data and calculate yearly averages, ignoring missing values (NAs)\nNFLX4 <- NFLX3 %>%\n  group_by(YEAR) %>%\n  summarise(\n    size = mean(size, na.rm = TRUE),\n    experience = mean(experience, na.rm = TRUE),\n    horizon = mean(horizon, na.rm = TRUE),\n    accuracy = mean(accuracy, na.rm = TRUE),\n    past_accuracy = mean(past_accuracy, na.rm = TRUE),\n    ACTUAL = mean(ACTUAL, na.rm = TRUE)\n  )\n\n# Present a summary of the NFLX4 dataset\nsummary(NFLX4)\n\n# Correlation analysis\ncorrelation_matrix <- cor(NFLX4[, c(\"size\", \"experience\", \"horizon\", \"accuracy\", \"past_accuracy\", \"ACTUAL\")], use = \"complete.obs\")\n\n# Print correlation matrix\nprint(correlation_matrix)\n\n# Exploratory data analysis\n# Create scatter plots to explore relationships\n\n# Scatter plot of ACTUAL vs. size\nggplot(NFLX4, aes(x = size, y = ACTUAL)) +\n  geom_point(color = \"blue\", shape = 1) +\n  ggtitle(\"ACTUAL vs. size\") +\n  xlab(\"size\") +\n  ylab(\"ACTUAL\")\n\n# Scatter plot of ACTUAL vs. experience\nggplot(NFLX4, aes(x = experience, y = ACTUAL)) +\n  geom_point(color = \"green\", shape = 2) +\n  ggtitle(\"ACTUAL vs. experience\") +\n  xlab(\"experience\") +\n  ylab(\"ACTUAL\")\n\n# Scatter plot of ACTUAL vs. horizon\nggplot(NFLX4, aes(x = horizon, y = ACTUAL)) +\n  geom_point(color = \"red\", shape = 3) +\n  ggtitle(\"ACTUAL vs. horizon\") +\n  xlab(\"horizon\") +\n  ylab(\"ACTUAL\")\n\n# Scatter plot of ACTUAL vs. accuracy\nggplot(NFLX4, aes(x = accuracy, y = ACTUAL)) +\n  geom_point(color = \"orange\", shape = 4) +\n  ggtitle(\"ACTUAL vs. accuracy\") +\n  xlab(\"accuracy\") +\n  ylab(\"ACTUAL\")\n\n# Scatter plot of ACTUAL vs. past_accuracy\nggplot(NFLX4, aes(x = past_accuracy, y = ACTUAL)) +\n  geom_point(color = \"purple\", shape = 5) +\n  ggtitle(\"ACTUAL vs. past_accuracy\") +\n  xlab(\"past_accuracy\") +\n  ylab(\"ACTUAL\")\n\n# Save NFLX4 to a CSV file if needed\n# write.csv(NFLX4, \"NFLX4.csv\", row.names = FALSE)\n```\n","srcMarkdownNoYaml":"\n\n# Business Problem\n\nIn this group project, you will work with analysts' forecast data of earning per share (EPS) provided by Wharton Research Data Services (WRDS). Institutional Brokers' Estimate System (I/B/E/S) provides historical data on certain financial indicators collected from thousands of individual analysts working in more than 3,000 broker houses.\n\n-   **TICKER:** A unique identifier assigned to each security. In this group project, you will only model \"NFLX\" ticker.\n\n-   **CNAME:** Company name\n\n-   **ACTDATS:** The Activation date: It is the date when the analyst forecast became effective within the IBES database.\n\n-   **ESTIMATOR:** Sellside institution (mostly broker house). It is just the broker.\n\n-   **ANALYS:** The person who makes the forecast and work for sellside institution. Estimators and analysts are represented by codes to hide their real names.\n\n-   **FPI:** Forecast Period Indicator: The forecasting period. 6: Next Fiscal Quarter 1: Next Fiscal Year\n\n-   **MEASURE**: The variable being estimated. We have data for earning per share (EPS)\n\n-   **VALUE:** The forecasted value of EPS\n\n-   **FPEDATS**: The Forecast Period End Date: It is the ending date of the fiscal period to which the estimate applies. For the majority of companies, the FPEDATS date is December 31st of that year.\n\n-   **REVDATS:** The Review Date: It is the most recent date on which IBES called the analyst and verified that particular estimate as still valid for that analyst. If an analyst confirms that a previous estimate is still valid, the original database record for that estimate is retained and only the REVDATS variable is updated. If an analyst changes their estimate for a given company, a new record is entered in the database with a new ANNDATS. The old record of the analyst (containing the previous estimate) is retained in the database.\n\n-   **REVTIMS**: Time-stamp of REVDATS\n\n-   **ANNDATS**: The Announce date: It is the date on which the analyst first made that particular estimate.\n\n-   **ANNTIMS**: Time-stamp of ANNDATS\n\n-   **ACTUAL**: The realized EPS, the true EPS value.\n\n-   **ANNDATS_ACT**: The Announced date of Actual EPS: The actual EPS value is announced by the company at this date.\n\n-   **ANNTIMS_ACT**: The time-stamp of ANNDATS_ACT\n\n```{r, echo=TRUE, warning=FALSE}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(corrplot)\nlibrary(lubridate)\nlibrary(kableExtra) \n# Read CSV file\nNFLX <- read.csv(\"C:/Users/HP/Downloads/NFLX.csv\", header=TRUE)\nnames(NFLX)\n```\n\n## How to read the data\n\n**The first row in NFLX data set**: On 09‐Aug-2002 (ANNDATS), analyst 6749 (ANALYS) at Estimator 1872 (ESTIMATOR) predicts that the EPS (MEASURE) for NETFLIX INC. (CNAME) with a ticker of NFLX (TICKER) with forecast period ending 30‐Sep-2002 (FPEDATS) is -\\$0.0086 (VALUE). This estimates was entered into the database on 12‐Aug-2002 (ACTDATS). On 17-Oct-2002 (ANNDATS_ACT), NETFLIX INC. announced an actual EPS of \\$7e-04 (\\$0.0007) (ACTUAL) for this quarter (FPI=6).\n\n```{r, echo=TRUE}\nhead(NFLX,n=1)\n```\n\n## Your Turn:\n\n::: {.callout-important appearance=\"simple\"}\n## Task 1A: Calculate Missingness\n\nCheck to see the missing values in NFLX dataset and calculate the percent missing for each variable in `NFLX` and list your findings in R object called `NFLX_missingness`. `NFLX_missingness` is a dataframe with two columns: The first column, `Variable`, stores the variable names and the second column, `Missingness` shows the percent missing in percentage points with two decimal points.\n:::\n\n## Your code for Task 1A\n\n```{r, echo=TRUE}\nlibrary(tidyr)\nNFLX <- read.csv(\"C:/Users/HP/Downloads/NFLX.csv\", header=TRUE)\nnames(NFLX)\n# Calculate the percent missing for each variable in NFLX\nNFLX_missingness <- NFLX %>%\n    summarise_all(~mean(is.na(.)) * 100)\n\n# Print the NFLX_missingness data frame\nprint(NFLX_missingness)\n```\n\n::: {.callout-important appearance=\"simple\"}\n## Task 1B: Data Manipulation\n\nConduct the following data manipulations on `NFLX`:\n\n-   Drop rows from the data set when a variable has a missing value\n\n-   Drop rows from the data set the quarterly forecasts (drop FPI=6)\n\n-   Declare TICKER, CNAME, ESTIMATOR , ANALYS, FPI , and MEASURE variables as factor\n\n-   Declare ACTDATS, FPEDATS , ANNDATS, REVDATS, ANNDATS_ACT as time variable.\n\n-   Drop ANNTIMS_ACT, ANNTIMS , and REVTIMS\n\n-   Create a new column named YEAR that captures the year in FPEDATS\n\n-   Name your reduced dataset as `NFLX1`\n\n-   Print out data structure and the summary of NFLX1\n:::\n\n## Your code for Task 1B\n\n```{r, echo=TRUE}\n# Copy NFLX to NFLX1 without assigning data types\nNFLX1 <- NFLX\n\n# Drop rows from the data set when a variable has a missing value\nNFLX1 <- NFLX1 %>% na.omit()\n\n# Drop rows from the data set where FPI=6\nNFLX1 <- NFLX1 %>% filter(FPI != 6)\n\n# Drop ANNTIMS_ACT, ANNTIMS, and REVTIMS\nNFLX1 <- NFLX1 %>% select(-ANNTIMS_ACT, -ANNTIMS, -REVTIMS)\n\n# Create a new column named YEAR that is an exact copy of the data in FPEDATS\nNFLX1 <- NFLX1 %>% mutate(YEAR = FPEDATS)\n\n# Print out data structure and the summary of NFLX1\nstr(NFLX1)\nsummary(NFLX1)\n```\n\n::: {.callout-important appearance=\"simple\"}\n## Task 2: Calculate Number of Analysts and Brokerage Houses\n\n-   Calculate the total number of **unique** analysts in **NFLX1** dataset that provide forecasts **each year** and name your R object as **NumberAnalyst**\n\n-   Calculate the total number of **unique** brokerage houses (ESTIMATOR) in **NFLX1** dataset that provide forecasts **each year** and name your R object as **NumberBrokerage**\n\n-   **Need Written Response in this callout:** In which year(s) we have the highest number of unique analysts providing forecasts for NFLX ticker? In which year(s), we have the highest number of unique brokerage houses providing forecasts for the NFLX ticker.\n\n***`2011 is the year number of distinct analysts providing forecasts for netflix.`***\n:::\n\n## Your code for Task 2\n\n```{r, echo=TRUE}\n# Calculate the total number of unique analysts providing forecasts each year\nNumberAnalyst <- NFLX1 %>%\n  group_by(YEAR) %>%\n  distinct(ESTIMATOR) %>%\n  summarise(NumAnalysts = n_distinct(ESTIMATOR))\n\n# Print the NumberAnalyst object\nprint(NumberAnalyst)\n\n# Calculate the total number of unique brokerage houses providing forecasts each year\nNumberBrokerage <- NFLX1 %>%\n  group_by(YEAR) %>%\n  distinct(ESTIMATOR) %>%\n  summarise(NumBrokerage = n_distinct(ESTIMATOR))\n\n# Print the NumberBrokerage object\nprint(NumberBrokerage)\n\n```\n\n::: {.callout-important appearance=\"simple\"}\n## Task 3: Get the most recent forecast in each year\n\n-   It is quite possible that an analyst makes multiple forecasts throughout the year for the same fiscal period. Remove observations from **NFLX1** if an analyst has multiple predictions for the same year and keep the last one (the most recent forecast for each year). Name your new dataset as **NFLX2.** This step is crucial for successful execution of the following tasks. Print the dimension of `NFLX2`.\n\n-   Check your work: If your `NFLX2` dataset has 641 rows and 14 columns, then you are on the right track. If not, please seek help!\n:::\n\n## Your code for Task 3\n\n```{r, echo=TRUE}\n# Task 3: Get the most recent forecast in each year\n\n# Get the most recent forecast for each analyst in each year\nNFLX2 <- NFLX1 %>%\n    # Group by analyst and year\n    group_by(ANALYS, YEAR) %>%\n    # Filter to keep the most recent forecast for each analyst in each year\n    filter(\n        REVDATS == max(REVDATS)\n    ) %>%\n    # Ungroup the data frame\n    ungroup()\n\n# Print the dimension of NFLX2\ndim(NFLX2)\n\n# Check your work: If your NFLX2 dataset has 641 rows and 14 columns, then you are on the right track. If not, please seek help!\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 4: Calculate past accuracy\n\n-   Create a copy of `NFLX2` and call it `NFLX3`\n\n-   For every year within the dataset `NFLX3`, compute the forecasting performance of each analyst for the current year and store the results in a new column labeled `accuracy`. In the calculation of forecast performance, you can use the VALUE-ACTUAL as the forecast accuracy measure.\n\n-   For each year in the `NFLX3` dataset, compute the forecasting performance of each analyst from the **previous year** and store the results in a new column called `past_accuracy`\n\n-   As an example, consider the year 2006, where analyst 1047, employed at brokerage house 464, provided an estimated end-of-period EPS of 0.0929 (VALUE). However, the actual EPS for that year turned out to be 0.1014 (ACTUAL), resulting in a forecasting error of -0.0085. Consequently, in the subsequent year, 2007, the past_accuracy metric for analyst 1047 would reflect this error by taking the value of -0.0085 (VALUE-ACTUAL).\n\n-   This action will create some missing values and this is perfectly fine.\n\n-   If your code produces 144 NAs, then you are on the right track.\n\n-   Note that we are creating copies of the original dataset at each step to facilitate error detection in case any mistakes occur during the process.\n:::\n\n## Your code for Task 4\n\n```{r, echo=TRUE}\n\n# Create a copy of NFLX2 and call it NFLX3\nNFLX3 <- NFLX2\n\n# Task 4: Calculate past accuracy\n\n# For every year within the dataset NFLX3, compute the forecasting performance of each analyst for the current year and store the results in a new column labeled accuracy.\nNFLX3 <- NFLX3 %>%\n  group_by(YEAR, ANALYS) %>%\n  mutate(accuracy = VALUE - ACTUAL)\n\n# For each year in the NFLX3 dataset, compute the forecasting performance of each analyst from the previous year and store the results in a new column called past_accuracy\nNFLX3 <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  arrange(YEAR) %>%\n  mutate(past_accuracy = lag(accuracy))\n\n# Check if the code produces 144 NAs\nsum(is.na(NFLX3$past_accuracy))\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 5: Forecast Horizon\n\n-   The longer the forecast horizon, the higher the uncertainty associated with EPS forecasts. To control for this fact, create a new column in **NFLX3** called **horizon** that captures the forecast horizon (ANNDATS_ACT- ANNDATS) for **each analyst**.\n\n-   We anticipate observing a negative correlation between `accuracy` and `horizon`. Typically, as the forecast horizon increases, the accuracy tends to decrease, and vice versa. However, in our dataset, there is an exception where we find a positive correlation between `accuracy` and `horizon` for one specific year. Write an R code to identify and determine which year exhibits this positive correlation.\n\n-   **Need Written Response in this callout:** Enter the year in here.\n\n    ***2011 2012 2103 2015 and 2018 with 2018 having a forecast value of 0.24.***\n:::\n\n## Your code for Task 5\n\n```{r, echo=TRUE}\n# Task 5: Forecast Horizon\n# Calculate past accuracy and forecast horizon\nNFLX3 <- NFLX3 %>% group_by(ANALYS) %>% arrange(YEAR) %>% mutate(past_accuracy = lag(accuracy, default = NA))\nNFLX3 <- NFLX3 %>% mutate(horizon = as.numeric(difftime(ANNDATS_ACT, ANNDATS, units = \"days\")))\n\n# Calculate correlation and find positive correlation year\ncorrelation_by_year <- NFLX3 %>% group_by(YEAR) %>% summarise(correlation = cor(accuracy, horizon, use = \"complete.obs\"))\npositive_corr_year <- correlation_by_year %>% filter(correlation > 0)\n\n# Print positive correlation year with correlation values\npositive_corr_year %>% mutate(correlation = round(correlation, 2)) %>% kable() %>% kable_styling(bootstrap_options = \"striped\")\n\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Table 6: Experience\n\n-   We assume that if an analyst is monitoring a company for a long period of time, he/she is expected to make more informed predictions. Create a new column in NFLX3 called **experience** that counts the cumulative number of years the analyst monitor (have predictions) the company. Print the summary of experience column.\n\n-   **Hint:** Try to use cumsum() function in R.\n\n-   **Need Written Response in this callout:** Which analyst (s) has the highest number of **experience** in **NFLX3** dataset and for how long do they monitor the NFLX ticker?\n\n***`Analyst 72088 and 77748 have 17 years of hardcore experience`***\n:::\n\n## Your code for Task 6\n\n```{r, echo=TRUE}\n # Task 6: Experience\n\n# Calculate the cumulative experience for each analyst\nNFLX3 <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  mutate(experience = cumsum(!duplicated(YEAR)))\n\n# Find the analyst(s) with the highest experience\nmax_experience <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  summarise(experience = max(experience)) %>%\n  filter(experience == max(experience))\n\n# Print the summary of the experience column\nprint(summary(NFLX3$experience))\n\n# Find the analyst(s) with the highest experience\nmax_experience <- NFLX3 %>%\n  group_by(ANALYS) %>%\n  summarise(experience = max(experience)) %>%\n  filter(experience == max(experience))\n\n# Print the summary of the experience column\nprint(summary(NFLX3$experience))\n\n# Print the analyst(s) with the highest experience\nprint(max_experience)\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 7: Size\n\n-   If a brokerage house has multiple analysts providing predictions for the same company, it may indicate a greater allocation of resources for company analysis. To capture this, create a new column in the `NFLX3` dataset called `size` that calculates the total count of **unique** analysts employed **per year** by **each** brokerage house (ESTIMATOR)\n\n-   **Need Written Response in this callout:** Print the frequencies for **size** variable. What does this frequency table reveal about the distribution of the number of analysts hired by brokerage houses in this dataset?\n\n***`From the table we can conclude that as the number of analysts increase the frequency of hiring reduces exponentially. This indicates that a brokerage preferred hiring one analyst per every season.`***\n:::\n\n## Your code for Task 7\n\n```{r, echo=TRUE}\n # Task 7: Size\n\n# Calculate the total count of unique analysts employed per year by each brokerage house\nNFLX3 <- NFLX3 %>%\n  group_by(YEAR, ESTIMATOR) %>%\n  mutate(size = n_distinct(ANALYS))\n\n# Print the frequencies for the size variable\nsize_freq <- table(NFLX3$size)\nprint(size_freq)\n\n# Create a frequency table for better visualization\nsize_table <- as.data.frame(size_freq)\ncolnames(size_table) <- c(\"Number of Analysts\", \"Frequency\")\n\n# Sort the table by frequency in descending order\nsize_table <- size_table[order(-size_table$Frequency), ]\n\n# Print the sorted frequency table\nprint(size_table)\n\n# Summary statistics for size variable\nsummary(NFLX3$size)\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 8: Prediction 1\n\n-   In the year 2020, NETFLIX reported an actual earnings per share (EPS) of \\$6.08. To predict this EPS value based on historical data, we will employ a linear regression model using the dataset `NFLX3` up until the year 2019. In this model, the target variable will be `ACTUAL` and the predictor variables will include `VALUE` and `past_accuracy`. C.all your model as `model1.`\n\n-   **Need Written Response in this callout:** Using the linear regression model 'model1,' which has been trained on historical data up to the year 2019, what is the forecasted EPS (Earnings Per Share) for the year 2020? Please provide a brief explanation of the method you employed to make this prediction. If you encountered any challenges or were unable to make the calculation, briefly describe the specific issues you encountered.\n\n***`Using the linear regression model 'model1,' trained on historical data up to the year 2019, we can forecast the EPS (Earnings Per Share) for the year 2020. The method employed involves calculating the R-squared value of the model, which measures the goodness of fit. If the R-squared value is high (greater than 0.5 in this case), we proceed with forecasting.`***\n\n***`In this example, the code calculates the mean of the 'past_accuracy' variable. If the R-squared value is satisfactory, we generate a forecast for the future period. We create a new data frame for the future period with values for the independent variables (VALUE and past_accuracy). The code then uses the 'predict' function to estimate the EPS for the future period.`***\n\n***`If the R-squared value is low, a warning message is provided, indicating that the model may not accurately predict future EPS.`***\n\n***`The method allows us to make forecasts if the model's fit is deemed appropriate. However, we encountered issues with data configuration or model training, those specific challenges should be addressed to ensure the accuracy of the model`***\n:::\n\n## Your code for Task 8\n\n```{r, echo=TRUE}\n# Calculate the mean of past_accuracy\nmean_past_accuracy <- mean(NFLX3$past_accuracy, na.rm = TRUE)\n\n# Convert the 'YEAR' column to the desired format\nNFLX3$YEAR <- as.POSIXct(NFLX3$YEAR, format = \"%Y-%m-%d %H:%M:%S\")\n\n# Create the linear regression model using historical data up to the year 2019\nmodel1 <- lm(ACTUAL ~ VALUE + past_accuracy, data = NFLX3)\n\n# Get the R-squared value of the model\nr_squared <- summary(model1)$r.squared\n\n# If the R-squared value is high, then we can use the model to generate a forecast\nif (r_squared > 0.5) {\n  # Create a new data frame for the future period with the values of the independent variables\n  new_data_future <- data.frame(\n    VALUE = 6.08, # Replace this with the actual value of VALUE for the future period\n    past_accuracy = mean_past_accuracy\n  )\n\n  # Predict the EPS for the future period\n  predicted_eps_future <- predict(model1, newdata = new_data_future)\n\n  # Print the forecasted EPS for the future period\n  cat(\"Forecasted EPS for future period: $\", round(predicted_eps_future, 2))\n} else {\n  # Print a warning message\n  cat(\"The R-squared value is low, so the model may not be able to accurately predict future values of the dependent variable.\")\n}\n\n# Print the mean of past_accuracy\ncat(\"Mean past_accuracy: \", round(mean_past_accuracy, 2))\n\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 9: Prediction 2\n\n-   As an alternative approach, instead of modeling the 'ACTUAL' value, we can obtain the mean and median forecasts for the year 2020 as our best estimates of the EPS value for that year.\n\n-   **Need Written Response in this callout:** Please calculate these forecasts and then compare them with the results from the previous task. Finally, provide your insights and comments based on your findings.\n\n***`In this alternative approach, we opted to calculate the mean and median forecasts for the year 2020 as our best estimates of the EPS value. The mean forecast for 2020 is approximately $1.24, while the median forecast is significantly lower, at approximately $0.41. When comparing these results with the linear regression model from the previous task, it's evident that the model-based forecast might provide a more detailed and potentially accurate prediction. However, these two approaches have their unique merits and drawbacks. The model-driven forecast takes into account historical relationships and variables like 'past_accuracy,' but it heavily relies on the quality of the model fit, as indicated by the R-squared value. On the other hand, the mean and median forecasts provide simple summary statistics but might lack the predictive power of a well-fitted model. The choice between these methods should be influenced by the data quality and the context of the analysis.`***\n:::\n\n## Your code for Task 9\n\n```{r, echo=TRUE}\n# Calculate the mean forecast\nmean_forecast <- mean(NFLX3$VALUE, na.rm = TRUE)\n\n# Calculate the median forecast\nmedian_forecast <- median(NFLX3$VALUE, na.rm = TRUE)\n\n# Print the mean and median forecasts\ncat(\"Mean forecast for 2020: $\", round(mean_forecast, 2))\ncat(\"Median forecast for 2020: $\", round(median_forecast, 2))\n```\n\n### \n\n::: {.callout-important appearance=\"simple\"}\n## Task 10: Averages\n\n-   Generate a new dataset named `NFLX4` by aggregating data from `NFLX3` Include the variables `size`, `experience`, `horizon`, `accuracy,` `past_accuracy`, and `ACTUAL` in `NFLX4`. When calculating the yearly averages for these variables, ignore any missing values (NAs). Present a summary of the `NFLX4` dataset.\n\n-   **Need Written Response in this callout:** Subsequently, employ correlation analysis or exploratory data analysis to get insights into the relationships between these variables and 'ACTUAL,' if such relationships exist.\n\n***`After conducting correlation analysis and exploratory data analysis on the dataset NFLX4, several interesting insights into the relationships between variables and 'ACTUAL' have emerged`***\n\n***`The correlation matrix reveals that 'ACTUAL' is positively correlated with 'size' (0.18) and 'experience' (0.69), indicating that, on average, larger groups of analysts and analysts with more experience tend to provide more accurate forecasts for the 'ACTUAL' earnings per share.`***\n\n***`Conversely, 'ACTUAL' is negatively correlated with 'horizon' (-0.63) and 'past_accuracy' (-0.80). This suggests that analysts with a longer forecasting horizon and those who have made more accurate predictions in the past tend to have less accurate forecasts for 'ACTUAL' earnings per share.`***\n\n***`In the exploratory data analysis, scatter plots further highlight these relationships. For instance, the scatter plot of 'ACTUAL' against 'size' shows a general trend of improved accuracy as the number of analysts increases.`***\n\n***`These findings provide valuable insights for understanding the factors that influence the accuracy of earnings per share forecasts ('ACTUAL'). Larger analyst groups and more experienced analysts tend to provide more accurate forecasts, while longer forecasting horizons and a history of past accuracy can lead to less accurate predictions. These relationships can be crucial for analysts, investors, and decision-makers in the financial domain.`***\n:::\n\n```{r, echo=TRUE}\n# Aggregate data and calculate yearly averages, ignoring missing values (NAs)\nNFLX4 <- NFLX3 %>%\n  group_by(YEAR) %>%\n  summarise(\n    size = mean(size, na.rm = TRUE),\n    experience = mean(experience, na.rm = TRUE),\n    horizon = mean(horizon, na.rm = TRUE),\n    accuracy = mean(accuracy, na.rm = TRUE),\n    past_accuracy = mean(past_accuracy, na.rm = TRUE),\n    ACTUAL = mean(ACTUAL, na.rm = TRUE)\n  )\n\n# Present a summary of the NFLX4 dataset\nsummary(NFLX4)\n\n# Correlation analysis\ncorrelation_matrix <- cor(NFLX4[, c(\"size\", \"experience\", \"horizon\", \"accuracy\", \"past_accuracy\", \"ACTUAL\")], use = \"complete.obs\")\n\n# Print correlation matrix\nprint(correlation_matrix)\n\n# Exploratory data analysis\n# Create scatter plots to explore relationships\n\n# Scatter plot of ACTUAL vs. size\nggplot(NFLX4, aes(x = size, y = ACTUAL)) +\n  geom_point(color = \"blue\", shape = 1) +\n  ggtitle(\"ACTUAL vs. size\") +\n  xlab(\"size\") +\n  ylab(\"ACTUAL\")\n\n# Scatter plot of ACTUAL vs. experience\nggplot(NFLX4, aes(x = experience, y = ACTUAL)) +\n  geom_point(color = \"green\", shape = 2) +\n  ggtitle(\"ACTUAL vs. experience\") +\n  xlab(\"experience\") +\n  ylab(\"ACTUAL\")\n\n# Scatter plot of ACTUAL vs. horizon\nggplot(NFLX4, aes(x = horizon, y = ACTUAL)) +\n  geom_point(color = \"red\", shape = 3) +\n  ggtitle(\"ACTUAL vs. horizon\") +\n  xlab(\"horizon\") +\n  ylab(\"ACTUAL\")\n\n# Scatter plot of ACTUAL vs. accuracy\nggplot(NFLX4, aes(x = accuracy, y = ACTUAL)) +\n  geom_point(color = \"orange\", shape = 4) +\n  ggtitle(\"ACTUAL vs. accuracy\") +\n  xlab(\"accuracy\") +\n  ylab(\"ACTUAL\")\n\n# Scatter plot of ACTUAL vs. past_accuracy\nggplot(NFLX4, aes(x = past_accuracy, y = ACTUAL)) +\n  geom_point(color = \"purple\", shape = 5) +\n  ggtitle(\"ACTUAL vs. past_accuracy\") +\n  xlab(\"past_accuracy\") +\n  ylab(\"ACTUAL\")\n\n# Save NFLX4 to a CSV file if needed\n# write.csv(NFLX4, \"NFLX4.csv\", row.names = FALSE)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"github","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":{"light":"cerulean","dark":["sketchy"]},"title-block-banner":true,"title":"Bussiness analytic using R","date":"2023-12-09","author":"Bhagyasri Katuri","categories":["code","analysis","visualization","plotly","data anlysis","R"],"image":"b.jpg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}